/**********************************************************************/
/* This file is autogenerated - DO NOT EDIT! (change calc.rb instead) */
/**********************************************************************/

/*
 * Autogenerated code for Core1 firmware.
 *
 * Copyright (C) 2017-2018, 2020  John A. Tuffen, Simon Hickinbotham, wonkystuff
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * Questions/queries can be directed to info@wonkystuff.net
 */

#ifndef __CALC_H__
#define __CALC_H__

//dr1_noiser.ino definitions:

#define SRATE    (20000L)
#define DACBITS  (8L)
#define DACRANGE (256L)

#define TTYPE uint32_t
#define VTYPE uint8_t

extern const uint16_t octaveLookup[DACRANGE];

#define NUMADCS    (4U)
#define ADCBITS    (10U)
#define ADCRANGE   (1U << ADCBITS)

#define ADCREDUX(val, bits) ( val >> (ADCBITS - bits))

// Base-timer is running at 16MHz
#define F_TIM (16000000L)

// Fixed value to start the ADC
// enable ADC, start conversion, prescaler = /64 gives us an ADC clock of 8MHz/64 (125kHz)
#define ADCSRAVAL ( _BV(ADEN) | _BV(ADSC) | _BV(ADPS2) | _BV(ADPS1)  | _BV(ADIE) )

// Remember(!) the input clock is 64MHz, therefore all rates
// are relative to that.
// let the preprocessor calculate the various register values 'coz
// they don't change after compile time
#if ((F_TIM/(SRATE)) < 255)
#define T1_MATCH ((F_TIM/(SRATE))-1)
#define T1_PRESCALE _BV(CS00)  //prescaler clk/1 (i.e. 8MHz)
#else
#define T1_MATCH (((F_TIM/8L)/(SRATE))-1)
#define T1_PRESCALE _BV(CS01)  //prescaler clk/8 (i.e. 1MHz)
#endif

#define OSCOUTREG (OCR1A)

// data structure used for different flavours of pot-values
typedef struct {              // RANGE     DESC
    uint16_t   raw;           // 0-1023    value from the ADC
    uint8_t    byteVal;       // 0-255     raw scaled from 0-255
    uint8_t    valSeven;      // 0-127     raw scaled from 0-127
    uint8_t    bitNum;        // 0-31
                              // --Powers of 2--
    uint32_t   bitSet32;      // single bit set according to 'bitNum' -- 2^bitNum (e.g. 8 --> 0x00000100)
    uint16_t   bitSet16;      // single bit set according to 'bitNum/2' (e.g. 8 --> 0x0010)
    uint8_t    bitSet8;       // single bit set according to 'bitNum/4' (e.g. 8 --> 0x04)
                              // --Masking via bitSet--
    uint32_t   bitMask32;     // bitSet32-1 (e.g. 0x00000100 --> 0x000000ff)
    uint16_t   bitMask16;     // bitSet16-1 (e.g. 0x0010 --> 0x000f)
    uint8_t    bitMask8;      // bitSet8-1  (e.g. 0x08 --> 0x07)
} potVal_t;


extern potVal_t var1;
extern potVal_t var2;

void wonkystuff_init();



#endif // __CALC_H__
